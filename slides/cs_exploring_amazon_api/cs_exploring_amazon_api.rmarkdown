---
title: "Case study: Exploring the Amazon API"
author: "Jorge Cimentada"
format: revealjs
editor: visual
---

```{r, echo = FALSE}
knitr::opts_chunk$set(
  eval = TRUE,
  echo = TRUE,
  message = TRUE,
  warning = FALSE,
  fig.align = "center",
  fig.asp = 0.618
)
```


# Exploring Amazon API

-   Amazon, the largest e-commerce website, has many APIs.

-   Some of these are open to the public while others are used internally.

-   Your company has just hired an Amazon which grants your company to access one of the Amazon APIs.

-   This is the same API we explore in the presentation on "Introduction to REST APIs"

-   If you remember correctly, the API can be launched with the function [`api_amazon()`](https://rdrr.io/pkg/scrapex/man/api_amazon.html) from the `scrapex` package.

# Exploring Amazon API

Launching the API:


```{r, message = FALSE}
library(scrapex)
library(httr2)
library(dplyr)
az_api <- api_amazon()
```


1.  Explore docs
2.  Explore endpoints
3.  Try it out

## Exploring Amazon API

![](images/paste-AB0B155A.png)

## Exploring Amazon API

-   7 endpoints

-   All of them are `GET` requests: important, we don't need to add a `body` anywhere.

> The endpoints contains data on all sorts of data from Amazon: authors and books from Amazon Books, users who visited Amazon and how each of these users bought certain Amazon products. As you might be hinting, this is quite some sensitive data. Unless you work at Amazon, you'll probably never have access to this. That's when security comes in.

## Tokens and security

Amazon has granted you access to their internal APIs but every few days Amazon has forced you to log in to your Amazon account and extract a token that needs to be refreshed before making any requests to the API.

<br>

-   Tokens are common in the API world

-   Ensure security on every request

-   Forces the user to identify on each request

-   Links a token to an email

## Tokens and security

-   For real examples, this token is usually sent over email or on your profile page somwhere

-   Since this is a fake example, `scrapex` has `amazon_bearer_token()`

-   Token are a random set of characters

-   Every time you run it, it will return a new "valid" token


```{r}
token <- amazon_bearer_tokens()
token
```


## Tokens and security

With this token in hand, how do I use it?

-   Depends on API

-   Read on docs how to do it

-   It's very common for these tokens to go in the headers


```{r}
main_api_path <- paste0(az_api$api_web, "/api/v1/amazon/")
header_token <- paste0("Bearer ", token)

req <-
  main_api_path %>%
  request() %>%
  req_headers(Authorization = header_token)
```


## Tokens and security


```{r}
req
```


-   Specified the root URL of the API (we are not pointing to a particular endpoint just yet)

-   We've specified one `key=value` pair for the headers: `Authorization`.

-   It automatically detects this header is private so it won't show it.

## Amazon Books: Authors

**The authors endpoint**

![](images/paste-2585BB6A.png){fig-align="center"}

No parameters needed

## Amazon Books: Authors


```{r}
req_res <- req %>% req_url_path_append("authors")
req_res
```


<br>


```{r}
res <- req_res %>% req_perform()
res
```


## Amazon Books: Authors

The request was successful with a `200` status code. The content type is JSON so we can extract it with `resp_body_json` and set `simplifyVector = TRUE` to convert it directly to a data frame:


```{r}
res %>%
  resp_body_json(simplifyVector = TRUE)
```


## Amazon Books: Authors

![](images/paste-D6E059B3.png){fig-align="center"}

This endpoint's URL is `books` and requires two parameters: `author` and `genre`

## Amazon Books: Authors

How do we specify the two string parameters in a request? `req_url_query`


```{r}
req_res <-
  req %>%
  req_url_path_append("books") %>%
  req_url_query(author = "Stuart Armstrong", genre = "Sunt")

req_res
```


## Amazon Books: Authors

Let's perform the request and directly extract the result with `resp_body_json`:


```{r}
resp <- req_perform(req_res) %>% resp_body_json(simplifyVector = TRUE) %>%
  as_tibble()
resp
```


## Amazon Books: Authors

Weird? Seems all rows are repeated?

> That's because the column `user_id` is showing us the users who have read this book. Aside from the author-book relationship, Amazon also has the book-customer relationship in these APIs.


```{r}
resp %>% select(-user_id) %>% distinct() %>% as.data.frame()
```


## Amazon Books: Authors

After figuring out that the only author is `Stuart Armstrong`, we can access actual samples of `Stuart's` books:

![](images/paste-594AB17B.png){fig-align="center"}

## Amazon Books: Authors

-   Needs `author` as parameter


```{r}
resp <-
  req %>%
  req_url_path_append("texts") %>%
  req_url_query(author = "Stuart Armstrong") %>%
  req_perform() %>%
  resp_body_json(simplifyVector = TRUE)

resp
```


## Amazon Books: User Behavior

`products_users`: ...access amazon's products/users database

![](images/paste-CBBCE658.png){fig-align="center"}

## Amazon Books: User Behavior

-   Link user behavior through different endpoints. Take user `319` (see [14.2](https://cimentadaj.github.io/dataharvesting/case-study-exploring-the-amazon-api.html#understand-amazon-books)) and see which other products the user has bought on Amazon.

-   Hidden relationships that you could uncover with the real data set: people who read certain books might have propensities to order certain products

-   This endpoint needs only one parameter, the user id (int not str)

## Amazon Books: User Behavior


```{r}
resp <-
  req %>%
  req_url_path_append("products_users") %>%
  req_url_query(user_id = 319) %>%
  req_perform() %>%
  resp_body_json(simplifyVector = TRUE)

resp
```


## Amazon Books: User Behavior

-   Info: price, image and tags of the product

-   Where's the name? *Amazon's product database...*

![](images/paste-8BDB0176.png){fig-align="center"}

## Amazon Books: User Behavior


```{r}
resp <-
  req %>%
  req_url_path_append("products") %>%
  req_url_query(product_id = 74) %>%
  req_perform() %>%
  resp_body_json(simplifyVector = TRUE)

resp
```


<br>

Great, we know the name of the product

## Amazon Books: User Behavior

*User's database:*

![](images/paste-1A738628.png){fig-align="center"}

## Amazon Books: User Behavior

-   Needs two arguments

-   Not required (what?). Only one is required (any of the two).

-   Different formats: string and integer

-   Not clear what info you'll get since the endpoint is too generic: user's database

-   Let's make a query and see what it returns

## Amazon Books: User Behavior


```{r}
resp <-
  req %>%
  req_url_path_append("users") %>%
  req_url_query(user_id = 319) %>%
  req_perform() %>%
  resp_body_json(simplifyVector = TRUE) %>%
  as_tibble()

resp
```


Alright, we know where the user is from, together with some technical IT info.

## Amazon Books: User Behavior

We can replicate the previous one but specify a country:


```{r}
resp <-
  req %>%
  req_url_path_append("users") %>%
  req_url_query(country = "Germany") %>%
  req_perform() %>%
  resp_body_json(simplifyVector = TRUE) %>%
  as_tibble()

resp
```


## Summary

-   Different endpoints return different data + have different access strategies

-   Some endpoints might be inter-dependent

-   Documentation of each endpoint is crucial for understanding the API

-   Better to construct endpoints with functions from the `httr2` package

## Homework

-   No homework, focus on final project

-   Make sure to submit the project ASAP. Will give me more time to revise. **Deadline is next class.**

-   Submission of your project will be to paste the Github URL to the repo [here](https://docs.google.com/spreadsheets/d/11QmdgRXvbwtN9hSOwVyw9-iVjrN-yeRq_BOudidAnX8/edit#gid=0).

